/***
*list.h - 1.包含通用链表的声明及各功能接口
*
*
*
* 函数体:定义于list.cpp
*
*
*
****/

#ifndef _LIST_H_
#define _LIST_H_

struct stCM_Linklist	//通用链表模板
{
	void* cmData;	//数据域
	struct stCM_Linklist* Next;	//指针域
};
typedef stCM_Linklist* PNode, cmNode;


/***********************************
功能：
初始化链表的头节点
参数：
data -- 需要保存的缓冲区
返回值：
返回头节点
说明:
若让head头结点不保存实际数据,
则可传入NULL参数
***********************************/
PNode LIST_init(void* data);

/***********************************
功能：
将数据保存到链表的尾部
参数：
data -- 需要保存的缓冲区
head -- 链表的头节点
返回值：
1 成功 0 失败
***********************************/
int LIST_add(void* data, PNode head);

/***********************************
功能：
返回链表的节点的个数
参数：
Head 链表的头节点
返回值：
节点个数
说明:
包含不保存实际数据的头结点
***********************************/
int LIST_count(PNode  head);

/***********************************
功能：
返回指定位置的节点
参数：
index -- 节点在链表中的下标
head -- 链表的头节点
返回值：
下标对应的节点
说明:
该下标包含不保存实际数据的头结点
***********************************/
PNode LIST_get(int index, PNode head);

/***********************************
功能：
释放链表的所有的节点,包括主链和子链
参数：	
head -- 链表的头节点
返回值：
释放的节点数
***********************************/
int LIST_free(PNode head);

/***********************************
功能：
删除指定位置的结点,并释放数据
参数：
index 节点在链表中的下标
head 链表的头节点
返回值：
1 成功 0 失败
***********************************/
int  LIST_remove(void* data, PNode head);

/***********************************
功能：
	更新链表某节点
参数：	
	source -- 要更新的数据
	dest -- 更新为该数据
	head -- 链表头节点
返回值：
1 成功 0 失败
Head 链表的头节点
返回值：
1 成功 0 失败
***********************************/
int LIST_update(void* source, void* dest, PNode head);



#endif